// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n22P5UCTG6TSvQEwcAgng5
// Component: L5GENl_EDr
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 7D7rbF4eiHT/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_grat_v_3.module.css"; // plasmic-import: n22P5UCTG6TSvQEwcAgng5/projectcss
import sty from "./PlasmicBluebutton1.module.css"; // plasmic-import: L5GENl_EDr/css

export const PlasmicBluebutton1__VariantProps = new Array();

export const PlasmicBluebutton1__ArgProps = new Array();

function PlasmicBluebutton1__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      shape={"rounded"}
      showStartIcon={true}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Tutorial"}
      </div>
    </Button>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBluebutton1__ArgProps,
      internalVariantPropNames: PlasmicBluebutton1__VariantProps
    });

    return PlasmicBluebutton1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBluebutton1";
  } else {
    func.displayName = `PlasmicBluebutton1.${nodeName}`;
  }
  return func;
}

export const PlasmicBluebutton1 = Object.assign(
  // Top-level PlasmicBluebutton1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicBluebutton1
    internalVariantProps: PlasmicBluebutton1__VariantProps,
    internalArgProps: PlasmicBluebutton1__ArgProps
  }
);

export default PlasmicBluebutton1;
/* prettier-ignore-end */
